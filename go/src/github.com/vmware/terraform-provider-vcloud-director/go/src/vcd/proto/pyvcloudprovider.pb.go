// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/pyvcloudprovider.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/pyvcloudprovider.proto
	proto/vapp.proto
	proto/catalog_item.proto
	proto/disk.proto
	proto/org.proto
	proto/user.proto
	proto/vdc.proto
	proto/vapp_vm.proto

It has these top-level messages:
	LoginCredentials
	LoginResult
	Catalog
	ReadCatalogResult
	CreateCatalogResult
	DeleteCatalogResult
	UpdateCatalogInfo
	UpdateCatalogResult
	ShareCatalogInfo
	ShareCatalogResult
	CheckResolvedResult
	StopResult
	StopInfo
	CreateVAppInfo
	CreateVAppResult
	DeleteVAppInfo
	DeleteVAppResult
	ReadVAppInfo
	ReadVAppResult
	UpdateVAppInfo
	UpdateVAppResult
	CatalogUploadMediaInfo
	CatalogUploadMediaResult
	CatalogUploadOvaInfo
	CatalogCheckResolvedInfo
	CatalogUploadOvaResult
	DeleteCatalogItemInfo
	DeleteCatalogItemResult
	IsPresentCatalogItemInfo
	IsPresentCatalogItemResult
	CaptureVAppInfo
	CaptureVAppResult
	CreateDiskInfo
	CreateDiskResult
	DeleteDiskInfo
	DeleteDiskResult
	ReadDiskInfo
	ReadDiskResult
	CreateOrgInfo
	CreateOrgResult
	DeleteOrgInfo
	DeleteOrgResult
	ReadOrgInfo
	ReadOrgResult
	UpdateOrgInfo
	UpdateOrgResult
	CreateUserInfo
	CreateUserResult
	DeleteUserInfo
	DeleteUserResult
	ReadUserInfo
	ReadUserResult
	UpdateUserInfo
	UpdateUserResult
	CreateVdcInfo
	CreateVdcResult
	DeleteVdcInfo
	DeleteVdcResult
	ReadVdcInfo
	ReadVdcResult
	UpdateVdcInfo
	UpdateVdcResult
	CreateVappVmInfo
	CreateVappVmResult
	DeleteVappVmInfo
	DeleteVappVmResult
	ReadVappVmInfo
	ReadVappVmResult
	UpdateVappVmInfo
	UpdateVappVmResult
	PowerOnVappVmInfo
	PowerOnVappVmResult
	PowerOffVappVmInfo
	PowerOffVappVmResult
	ModifyVappVmMemoryInfo
	ModifyVappVmMemoryResult
	ModifyVappVmCPUInfo
	ModifyVappVmCPUResult
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Tenant VCD crendentials
type LoginCredentials struct {
	Username          string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password          string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Org               string `protobuf:"bytes,3,opt,name=org" json:"org,omitempty"`
	UseVcdCliProfile  bool   `protobuf:"varint,4,opt,name=use_vcd_cli_profile,json=useVcdCliProfile" json:"use_vcd_cli_profile,omitempty"`
	Ip                string `protobuf:"bytes,5,opt,name=ip" json:"ip,omitempty"`
	AllowInsecureFlag bool   `protobuf:"varint,6,opt,name=allow_insecure_flag,json=allowInsecureFlag" json:"allow_insecure_flag,omitempty"`
}

func (m *LoginCredentials) Reset()                    { *m = LoginCredentials{} }
func (m *LoginCredentials) String() string            { return proto1.CompactTextString(m) }
func (*LoginCredentials) ProtoMessage()               {}
func (*LoginCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginCredentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginCredentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginCredentials) GetOrg() string {
	if m != nil {
		return m.Org
	}
	return ""
}

func (m *LoginCredentials) GetUseVcdCliProfile() bool {
	if m != nil {
		return m.UseVcdCliProfile
	}
	return false
}

func (m *LoginCredentials) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *LoginCredentials) GetAllowInsecureFlag() bool {
	if m != nil {
		return m.AllowInsecureFlag
	}
	return false
}

type LoginResult struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResult) Reset()                    { *m = LoginResult{} }
func (m *LoginResult) String() string            { return proto1.CompactTextString(m) }
func (*LoginResult) ProtoMessage()               {}
func (*LoginResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResult) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Catalog struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Catalog) Reset()                    { *m = Catalog{} }
func (m *Catalog) String() string            { return proto1.CompactTextString(m) }
func (*Catalog) ProtoMessage()               {}
func (*Catalog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Catalog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Catalog) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ReadCatalogResult struct {
	Present     bool   `protobuf:"varint,1,opt,name=present" json:"present,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Shared      bool   `protobuf:"varint,4,opt,name=shared" json:"shared,omitempty"`
}

func (m *ReadCatalogResult) Reset()                    { *m = ReadCatalogResult{} }
func (m *ReadCatalogResult) String() string            { return proto1.CompactTextString(m) }
func (*ReadCatalogResult) ProtoMessage()               {}
func (*ReadCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadCatalogResult) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

func (m *ReadCatalogResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadCatalogResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReadCatalogResult) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

type CreateCatalogResult struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *CreateCatalogResult) Reset()                    { *m = CreateCatalogResult{} }
func (m *CreateCatalogResult) String() string            { return proto1.CompactTextString(m) }
func (*CreateCatalogResult) ProtoMessage()               {}
func (*CreateCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateCatalogResult) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type DeleteCatalogResult struct {
	Deleted bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteCatalogResult) Reset()                    { *m = DeleteCatalogResult{} }
func (m *DeleteCatalogResult) String() string            { return proto1.CompactTextString(m) }
func (*DeleteCatalogResult) ProtoMessage()               {}
func (*DeleteCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteCatalogResult) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type UpdateCatalogInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OldName     string `protobuf:"bytes,2,opt,name=old_name,json=oldName" json:"old_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateCatalogInfo) Reset()                    { *m = UpdateCatalogInfo{} }
func (m *UpdateCatalogInfo) String() string            { return proto1.CompactTextString(m) }
func (*UpdateCatalogInfo) ProtoMessage()               {}
func (*UpdateCatalogInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateCatalogInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCatalogInfo) GetOldName() string {
	if m != nil {
		return m.OldName
	}
	return ""
}

func (m *UpdateCatalogInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type UpdateCatalogResult struct {
	Updated bool `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateCatalogResult) Reset()                    { *m = UpdateCatalogResult{} }
func (m *UpdateCatalogResult) String() string            { return proto1.CompactTextString(m) }
func (*UpdateCatalogResult) ProtoMessage()               {}
func (*UpdateCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateCatalogResult) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

type ShareCatalogInfo struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Shared bool   `protobuf:"varint,4,opt,name=shared" json:"shared,omitempty"`
}

func (m *ShareCatalogInfo) Reset()                    { *m = ShareCatalogInfo{} }
func (m *ShareCatalogInfo) String() string            { return proto1.CompactTextString(m) }
func (*ShareCatalogInfo) ProtoMessage()               {}
func (*ShareCatalogInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ShareCatalogInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShareCatalogInfo) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

type ShareCatalogResult struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ShareCatalogResult) Reset()                    { *m = ShareCatalogResult{} }
func (m *ShareCatalogResult) String() string            { return proto1.CompactTextString(m) }
func (*ShareCatalogResult) ProtoMessage()               {}
func (*ShareCatalogResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ShareCatalogResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// common
type CheckResolvedResult struct {
	Resolved bool `protobuf:"varint,1,opt,name=resolved" json:"resolved,omitempty"`
}

func (m *CheckResolvedResult) Reset()                    { *m = CheckResolvedResult{} }
func (m *CheckResolvedResult) String() string            { return proto1.CompactTextString(m) }
func (*CheckResolvedResult) ProtoMessage()               {}
func (*CheckResolvedResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CheckResolvedResult) GetResolved() bool {
	if m != nil {
		return m.Resolved
	}
	return false
}

type StopResult struct {
	Stopped bool `protobuf:"varint,1,opt,name=stopped" json:"stopped,omitempty"`
}

func (m *StopResult) Reset()                    { *m = StopResult{} }
func (m *StopResult) String() string            { return proto1.CompactTextString(m) }
func (*StopResult) ProtoMessage()               {}
func (*StopResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StopResult) GetStopped() bool {
	if m != nil {
		return m.Stopped
	}
	return false
}

type StopInfo struct {
}

func (m *StopInfo) Reset()                    { *m = StopInfo{} }
func (m *StopInfo) String() string            { return proto1.CompactTextString(m) }
func (*StopInfo) ProtoMessage()               {}
func (*StopInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto1.RegisterType((*LoginCredentials)(nil), "proto.LoginCredentials")
	proto1.RegisterType((*LoginResult)(nil), "proto.LoginResult")
	proto1.RegisterType((*Catalog)(nil), "proto.Catalog")
	proto1.RegisterType((*ReadCatalogResult)(nil), "proto.ReadCatalogResult")
	proto1.RegisterType((*CreateCatalogResult)(nil), "proto.CreateCatalogResult")
	proto1.RegisterType((*DeleteCatalogResult)(nil), "proto.DeleteCatalogResult")
	proto1.RegisterType((*UpdateCatalogInfo)(nil), "proto.UpdateCatalogInfo")
	proto1.RegisterType((*UpdateCatalogResult)(nil), "proto.UpdateCatalogResult")
	proto1.RegisterType((*ShareCatalogInfo)(nil), "proto.ShareCatalogInfo")
	proto1.RegisterType((*ShareCatalogResult)(nil), "proto.ShareCatalogResult")
	proto1.RegisterType((*CheckResolvedResult)(nil), "proto.CheckResolvedResult")
	proto1.RegisterType((*StopResult)(nil), "proto.StopResult")
	proto1.RegisterType((*StopInfo)(nil), "proto.StopInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PyVcloudProvider service

type PyVcloudProviderClient interface {
	// Tenant Loging to VCD
	Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*LoginResult, error)
	// check if catalog is preset and return true and the catalog details
	ReadCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*ReadCatalogResult, error)
	// create a new catalog
	CreateCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*CreateCatalogResult, error)
	// delete a catalog
	DeleteCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*DeleteCatalogResult, error)
	// update a catalog
	UpdateCatalog(ctx context.Context, in *UpdateCatalogInfo, opts ...grpc.CallOption) (*UpdateCatalogResult, error)
	// Share a catalog
	ShareCatalog(ctx context.Context, in *ShareCatalogInfo, opts ...grpc.CallOption) (*ShareCatalogResult, error)
	// catalog upload Media - anything other than ova
	CatalogUploadMedia(ctx context.Context, in *CatalogUploadMediaInfo, opts ...grpc.CallOption) (*CatalogUploadMediaResult, error)
	// catalog upload ova
	CatalogUploadOva(ctx context.Context, in *CatalogUploadOvaInfo, opts ...grpc.CallOption) (*CatalogUploadOvaResult, error)
	// check resolved after upload
	OvaCheckResolved(ctx context.Context, in *CatalogCheckResolvedInfo, opts ...grpc.CallOption) (*CheckResolvedResult, error)
	// catalog item delete
	DeleteCatalogItem(ctx context.Context, in *DeleteCatalogItemInfo, opts ...grpc.CallOption) (*DeleteCatalogItemResult, error)
	// check if catalog item is preset and return true
	IsPresentCatalogItem(ctx context.Context, in *IsPresentCatalogItemInfo, opts ...grpc.CallOption) (*IsPresentCatalogItemResult, error)
	CaptureVapp(ctx context.Context, in *CaptureVAppInfo, opts ...grpc.CallOption) (*CaptureVAppResult, error)
	// create vApp
	CreateVApp(ctx context.Context, in *CreateVAppInfo, opts ...grpc.CallOption) (*CreateVAppResult, error)
	// delete VApp
	DeleteVApp(ctx context.Context, in *DeleteVAppInfo, opts ...grpc.CallOption) (*DeleteVAppResult, error)
	// Read VApp
	ReadVApp(ctx context.Context, in *ReadVAppInfo, opts ...grpc.CallOption) (*ReadVAppResult, error)
	// Update VApp
	UpdateVApp(ctx context.Context, in *UpdateVAppInfo, opts ...grpc.CallOption) (*UpdateVAppResult, error)
	// remote stop interface for the plugin
	StopPlugin(ctx context.Context, in *StopInfo, opts ...grpc.CallOption) (*StopResult, error)
}

type pyVcloudProviderClient struct {
	cc *grpc.ClientConn
}

func NewPyVcloudProviderClient(cc *grpc.ClientConn) PyVcloudProviderClient {
	return &pyVcloudProviderClient{cc}
}

func (c *pyVcloudProviderClient) Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*LoginResult, error) {
	out := new(LoginResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) ReadCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*ReadCatalogResult, error) {
	out := new(ReadCatalogResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/ReadCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) CreateCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*CreateCatalogResult, error) {
	out := new(CreateCatalogResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/CreateCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) DeleteCatalog(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*DeleteCatalogResult, error) {
	out := new(DeleteCatalogResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/DeleteCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) UpdateCatalog(ctx context.Context, in *UpdateCatalogInfo, opts ...grpc.CallOption) (*UpdateCatalogResult, error) {
	out := new(UpdateCatalogResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/UpdateCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) ShareCatalog(ctx context.Context, in *ShareCatalogInfo, opts ...grpc.CallOption) (*ShareCatalogResult, error) {
	out := new(ShareCatalogResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/ShareCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) CatalogUploadMedia(ctx context.Context, in *CatalogUploadMediaInfo, opts ...grpc.CallOption) (*CatalogUploadMediaResult, error) {
	out := new(CatalogUploadMediaResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/CatalogUploadMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) CatalogUploadOva(ctx context.Context, in *CatalogUploadOvaInfo, opts ...grpc.CallOption) (*CatalogUploadOvaResult, error) {
	out := new(CatalogUploadOvaResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/CatalogUploadOva", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) OvaCheckResolved(ctx context.Context, in *CatalogCheckResolvedInfo, opts ...grpc.CallOption) (*CheckResolvedResult, error) {
	out := new(CheckResolvedResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/OvaCheckResolved", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) DeleteCatalogItem(ctx context.Context, in *DeleteCatalogItemInfo, opts ...grpc.CallOption) (*DeleteCatalogItemResult, error) {
	out := new(DeleteCatalogItemResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/DeleteCatalogItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) IsPresentCatalogItem(ctx context.Context, in *IsPresentCatalogItemInfo, opts ...grpc.CallOption) (*IsPresentCatalogItemResult, error) {
	out := new(IsPresentCatalogItemResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/isPresentCatalogItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) CaptureVapp(ctx context.Context, in *CaptureVAppInfo, opts ...grpc.CallOption) (*CaptureVAppResult, error) {
	out := new(CaptureVAppResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/CaptureVapp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) CreateVApp(ctx context.Context, in *CreateVAppInfo, opts ...grpc.CallOption) (*CreateVAppResult, error) {
	out := new(CreateVAppResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/CreateVApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) DeleteVApp(ctx context.Context, in *DeleteVAppInfo, opts ...grpc.CallOption) (*DeleteVAppResult, error) {
	out := new(DeleteVAppResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/DeleteVApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) ReadVApp(ctx context.Context, in *ReadVAppInfo, opts ...grpc.CallOption) (*ReadVAppResult, error) {
	out := new(ReadVAppResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/ReadVApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) UpdateVApp(ctx context.Context, in *UpdateVAppInfo, opts ...grpc.CallOption) (*UpdateVAppResult, error) {
	out := new(UpdateVAppResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/UpdateVApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyVcloudProviderClient) StopPlugin(ctx context.Context, in *StopInfo, opts ...grpc.CallOption) (*StopResult, error) {
	out := new(StopResult)
	err := grpc.Invoke(ctx, "/proto.PyVcloudProvider/StopPlugin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PyVcloudProvider service

type PyVcloudProviderServer interface {
	// Tenant Loging to VCD
	Login(context.Context, *LoginCredentials) (*LoginResult, error)
	// check if catalog is preset and return true and the catalog details
	ReadCatalog(context.Context, *Catalog) (*ReadCatalogResult, error)
	// create a new catalog
	CreateCatalog(context.Context, *Catalog) (*CreateCatalogResult, error)
	// delete a catalog
	DeleteCatalog(context.Context, *Catalog) (*DeleteCatalogResult, error)
	// update a catalog
	UpdateCatalog(context.Context, *UpdateCatalogInfo) (*UpdateCatalogResult, error)
	// Share a catalog
	ShareCatalog(context.Context, *ShareCatalogInfo) (*ShareCatalogResult, error)
	// catalog upload Media - anything other than ova
	CatalogUploadMedia(context.Context, *CatalogUploadMediaInfo) (*CatalogUploadMediaResult, error)
	// catalog upload ova
	CatalogUploadOva(context.Context, *CatalogUploadOvaInfo) (*CatalogUploadOvaResult, error)
	// check resolved after upload
	OvaCheckResolved(context.Context, *CatalogCheckResolvedInfo) (*CheckResolvedResult, error)
	// catalog item delete
	DeleteCatalogItem(context.Context, *DeleteCatalogItemInfo) (*DeleteCatalogItemResult, error)
	// check if catalog item is preset and return true
	IsPresentCatalogItem(context.Context, *IsPresentCatalogItemInfo) (*IsPresentCatalogItemResult, error)
	CaptureVapp(context.Context, *CaptureVAppInfo) (*CaptureVAppResult, error)
	// create vApp
	CreateVApp(context.Context, *CreateVAppInfo) (*CreateVAppResult, error)
	// delete VApp
	DeleteVApp(context.Context, *DeleteVAppInfo) (*DeleteVAppResult, error)
	// Read VApp
	ReadVApp(context.Context, *ReadVAppInfo) (*ReadVAppResult, error)
	// Update VApp
	UpdateVApp(context.Context, *UpdateVAppInfo) (*UpdateVAppResult, error)
	// remote stop interface for the plugin
	StopPlugin(context.Context, *StopInfo) (*StopResult, error)
}

func RegisterPyVcloudProviderServer(s *grpc.Server, srv PyVcloudProviderServer) {
	s.RegisterService(&_PyVcloudProvider_serviceDesc, srv)
}

func _PyVcloudProvider_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).Login(ctx, req.(*LoginCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_ReadCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).ReadCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/ReadCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).ReadCatalog(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_CreateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).CreateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/CreateCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).CreateCatalog(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_DeleteCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).DeleteCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/DeleteCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).DeleteCatalog(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_UpdateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatalogInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).UpdateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/UpdateCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).UpdateCatalog(ctx, req.(*UpdateCatalogInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_ShareCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareCatalogInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).ShareCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/ShareCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).ShareCatalog(ctx, req.(*ShareCatalogInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_CatalogUploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogUploadMediaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).CatalogUploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/CatalogUploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).CatalogUploadMedia(ctx, req.(*CatalogUploadMediaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_CatalogUploadOva_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogUploadOvaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).CatalogUploadOva(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/CatalogUploadOva",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).CatalogUploadOva(ctx, req.(*CatalogUploadOvaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_OvaCheckResolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogCheckResolvedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).OvaCheckResolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/OvaCheckResolved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).OvaCheckResolved(ctx, req.(*CatalogCheckResolvedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_DeleteCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatalogItemInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).DeleteCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/DeleteCatalogItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).DeleteCatalogItem(ctx, req.(*DeleteCatalogItemInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_IsPresentCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPresentCatalogItemInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).IsPresentCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/IsPresentCatalogItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).IsPresentCatalogItem(ctx, req.(*IsPresentCatalogItemInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_CaptureVapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureVAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).CaptureVapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/CaptureVapp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).CaptureVapp(ctx, req.(*CaptureVAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_CreateVApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).CreateVApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/CreateVApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).CreateVApp(ctx, req.(*CreateVAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_DeleteVApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).DeleteVApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/DeleteVApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).DeleteVApp(ctx, req.(*DeleteVAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_ReadVApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).ReadVApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/ReadVApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).ReadVApp(ctx, req.(*ReadVAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_UpdateVApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).UpdateVApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/UpdateVApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).UpdateVApp(ctx, req.(*UpdateVAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyVcloudProvider_StopPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyVcloudProviderServer).StopPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PyVcloudProvider/StopPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyVcloudProviderServer).StopPlugin(ctx, req.(*StopInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _PyVcloudProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PyVcloudProvider",
	HandlerType: (*PyVcloudProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _PyVcloudProvider_Login_Handler,
		},
		{
			MethodName: "ReadCatalog",
			Handler:    _PyVcloudProvider_ReadCatalog_Handler,
		},
		{
			MethodName: "CreateCatalog",
			Handler:    _PyVcloudProvider_CreateCatalog_Handler,
		},
		{
			MethodName: "DeleteCatalog",
			Handler:    _PyVcloudProvider_DeleteCatalog_Handler,
		},
		{
			MethodName: "UpdateCatalog",
			Handler:    _PyVcloudProvider_UpdateCatalog_Handler,
		},
		{
			MethodName: "ShareCatalog",
			Handler:    _PyVcloudProvider_ShareCatalog_Handler,
		},
		{
			MethodName: "CatalogUploadMedia",
			Handler:    _PyVcloudProvider_CatalogUploadMedia_Handler,
		},
		{
			MethodName: "CatalogUploadOva",
			Handler:    _PyVcloudProvider_CatalogUploadOva_Handler,
		},
		{
			MethodName: "OvaCheckResolved",
			Handler:    _PyVcloudProvider_OvaCheckResolved_Handler,
		},
		{
			MethodName: "DeleteCatalogItem",
			Handler:    _PyVcloudProvider_DeleteCatalogItem_Handler,
		},
		{
			MethodName: "isPresentCatalogItem",
			Handler:    _PyVcloudProvider_IsPresentCatalogItem_Handler,
		},
		{
			MethodName: "CaptureVapp",
			Handler:    _PyVcloudProvider_CaptureVapp_Handler,
		},
		{
			MethodName: "CreateVApp",
			Handler:    _PyVcloudProvider_CreateVApp_Handler,
		},
		{
			MethodName: "DeleteVApp",
			Handler:    _PyVcloudProvider_DeleteVApp_Handler,
		},
		{
			MethodName: "ReadVApp",
			Handler:    _PyVcloudProvider_ReadVApp_Handler,
		},
		{
			MethodName: "UpdateVApp",
			Handler:    _PyVcloudProvider_UpdateVApp_Handler,
		},
		{
			MethodName: "StopPlugin",
			Handler:    _PyVcloudProvider_StopPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pyvcloudprovider.proto",
}

func init() { proto1.RegisterFile("proto/pyvcloudprovider.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x5d, 0x8f, 0xdb, 0x44,
	0x14, 0x4d, 0xb2, 0xcd, 0x6e, 0x7a, 0x43, 0x8b, 0x33, 0xe9, 0xb6, 0xae, 0xd9, 0xc2, 0x62, 0x24,
	0xd4, 0x17, 0x52, 0x51, 0x24, 0x3e, 0x1e, 0x28, 0x6a, 0x53, 0x81, 0x22, 0x01, 0x6b, 0xb2, 0xda,
	0x3c, 0x21, 0x45, 0x83, 0x67, 0x36, 0x6b, 0xed, 0xc4, 0x33, 0x9a, 0xb1, 0xbd, 0x5a, 0xf1, 0xb3,
	0xf8, 0x19, 0xfc, 0x29, 0xe4, 0x99, 0xf1, 0xd8, 0x4e, 0x1c, 0xe0, 0x29, 0xb9, 0xe7, 0xfa, 0x9c,
	0x3b, 0xf7, 0xfa, 0xdc, 0x91, 0xe1, 0x4c, 0x48, 0x9e, 0xf1, 0x57, 0xe2, 0xbe, 0x88, 0x19, 0xcf,
	0x89, 0x90, 0xbc, 0x48, 0x08, 0x95, 0x33, 0x0d, 0xa3, 0xa1, 0xfe, 0x09, 0x3c, 0xf3, 0x50, 0x81,
	0x85, 0x30, 0x89, 0xc0, 0x37, 0x48, 0x8c, 0x33, 0xcc, 0xf8, 0x66, 0x9d, 0x64, 0x74, 0x6b, 0x32,
	0xe1, 0xdf, 0x7d, 0xf0, 0x7e, 0xe6, 0x9b, 0x24, 0x9d, 0x4b, 0x4a, 0x68, 0x9a, 0x25, 0x98, 0x29,
	0x14, 0xc0, 0x28, 0x57, 0x54, 0xa6, 0x78, 0x4b, 0xfd, 0xfe, 0x79, 0xff, 0xe5, 0xc3, 0xa5, 0x8b,
	0xcb, 0x9c, 0xc0, 0x4a, 0xdd, 0x71, 0x49, 0xfc, 0x81, 0xc9, 0x55, 0x31, 0xf2, 0xe0, 0x88, 0xcb,
	0x8d, 0x7f, 0xa4, 0xe1, 0xf2, 0x2f, 0xfa, 0x02, 0xa6, 0xb9, 0xa2, 0xeb, 0x22, 0x26, 0xeb, 0x98,
	0x25, 0x6b, 0x21, 0xf9, 0x75, 0xc2, 0xa8, 0xff, 0xe0, 0xbc, 0xff, 0x72, 0xb4, 0xf4, 0x72, 0x45,
	0x57, 0x31, 0x99, 0xb3, 0x24, 0x32, 0x38, 0x7a, 0x0c, 0x83, 0x44, 0xf8, 0x43, 0xcd, 0x1f, 0x24,
	0x02, 0xcd, 0x60, 0x8a, 0x19, 0xe3, 0x77, 0xeb, 0x24, 0x55, 0x34, 0xce, 0x25, 0x5d, 0x5f, 0x33,
	0xbc, 0xf1, 0x8f, 0x35, 0x7d, 0xa2, 0x53, 0x0b, 0x9b, 0xf9, 0x91, 0xe1, 0x4d, 0xf8, 0x19, 0x8c,
	0x75, 0x33, 0x4b, 0xaa, 0x72, 0x96, 0xa1, 0x27, 0x30, 0xcc, 0xf8, 0x2d, 0x4d, 0x6d, 0x13, 0x26,
	0x08, 0x7f, 0x80, 0x93, 0xb9, 0x19, 0x04, 0x42, 0xf0, 0xa0, 0xd1, 0xa4, 0xfe, 0x8f, 0xce, 0x61,
	0x4c, 0xa8, 0x8a, 0x65, 0x22, 0xb2, 0x84, 0xa7, 0xb6, 0xc7, 0x26, 0x14, 0xfe, 0x09, 0x93, 0x25,
	0xc5, 0xc4, 0x8a, 0xd8, 0x5a, 0x3e, 0x9c, 0x08, 0x49, 0x15, 0x4d, 0x33, 0xad, 0x36, 0x5a, 0x56,
	0xa1, 0x2b, 0x32, 0x38, 0x5c, 0xe4, 0x68, 0xaf, 0x08, 0x7a, 0x0a, 0xc7, 0xea, 0x06, 0x4b, 0x4a,
	0xec, 0xb0, 0x6c, 0x14, 0xbe, 0x82, 0xe9, 0x5c, 0x52, 0x9c, 0xd1, 0xbd, 0xf2, 0xb1, 0x86, 0x49,
	0x55, 0xde, 0x86, 0x25, 0xe1, 0x3d, 0x65, 0xb4, 0x83, 0x40, 0x34, 0xec, 0x08, 0x36, 0x0c, 0x09,
	0x4c, 0xae, 0x04, 0xa9, 0x2b, 0x2c, 0xd2, 0x6b, 0xde, 0x39, 0xa9, 0xe7, 0x30, 0xe2, 0x8c, 0xac,
	0x1b, 0xcd, 0x9d, 0x70, 0x46, 0x7e, 0xfd, 0x5f, 0xfd, 0x95, 0xc7, 0x6a, 0x55, 0xa9, 0x8f, 0x95,
	0x6b, 0xd8, 0x1d, 0xcb, 0x86, 0xe1, 0x1b, 0xf0, 0x2e, 0xcb, 0x11, 0xfc, 0xd7, 0xa9, 0x0e, 0x0d,
	0x6e, 0x06, 0xa8, 0xc9, 0xaf, 0xeb, 0xa9, 0x3c, 0x8e, 0xa9, 0x52, 0x55, 0x3d, 0x1b, 0x86, 0x5f,
	0xc2, 0x74, 0x7e, 0x43, 0xe3, 0xdb, 0x25, 0x55, 0x9c, 0x15, 0x94, 0x58, 0x42, 0x00, 0x23, 0x69,
	0x11, 0xcb, 0x70, 0x71, 0xf8, 0x39, 0xc0, 0x65, 0xc6, 0x45, 0x43, 0x3a, 0xe3, 0x42, 0xd4, 0xad,
	0xd8, 0x30, 0x04, 0x18, 0x95, 0xcf, 0x95, 0x2d, 0xbc, 0xfe, 0xeb, 0x21, 0x78, 0xd1, 0xfd, 0x4a,
	0xaf, 0x73, 0x64, 0xd7, 0x19, 0x7d, 0x0d, 0x43, 0xed, 0x63, 0xf4, 0xcc, 0xac, 0xe9, 0x6c, 0x77,
	0x45, 0x03, 0xd4, 0x4c, 0x98, 0x82, 0x61, 0x0f, 0x7d, 0x07, 0xe3, 0x86, 0x33, 0xd1, 0x63, 0xfb,
	0x90, 0x8d, 0x03, 0xdf, 0xc6, 0x7b, 0xee, 0x0d, 0x7b, 0xe8, 0x7b, 0x78, 0xd4, 0xf2, 0xd5, 0x1e,
	0x39, 0xa8, 0xe2, 0x7d, 0xf7, 0x19, 0x7a, 0xcb, 0x65, 0x07, 0xe9, 0x1d, 0x5e, 0x0c, 0x7b, 0xe8,
	0x27, 0x78, 0xd4, 0x72, 0x03, 0xaa, 0x8e, 0xba, 0xe7, 0x44, 0x27, 0xd4, 0xe1, 0x9e, 0xb0, 0x87,
	0xde, 0xc3, 0x07, 0xcd, 0xb7, 0xec, 0x06, 0xb8, 0x6b, 0x9d, 0xe0, 0x79, 0x47, 0xc2, 0xa9, 0xac,
	0x00, 0x59, 0xe8, 0x4a, 0x30, 0x8e, 0xc9, 0x2f, 0x94, 0x24, 0x18, 0xbd, 0x68, 0xb7, 0xd4, 0x48,
	0x69, 0xc5, 0x4f, 0x0e, 0xa6, 0x9d, 0x6e, 0x04, 0x5e, 0x2b, 0x7b, 0x51, 0x60, 0xf4, 0x51, 0x17,
	0xed, 0xa2, 0x30, 0x9a, 0x2f, 0x0e, 0x24, 0x9d, 0xe2, 0x6f, 0xe0, 0x5d, 0x14, 0xb8, 0x65, 0x54,
	0xb4, 0x73, 0x90, 0x56, 0xb2, 0x35, 0xc2, 0x0e, 0x7f, 0x87, 0x3d, 0x74, 0x09, 0x93, 0xd6, 0x4b,
	0x5a, 0x64, 0x74, 0x8b, 0xce, 0xba, 0x5e, 0x5f, 0x99, 0xd1, 0x82, 0x1f, 0x1f, 0xca, 0x3a, 0xd1,
	0xdf, 0xe1, 0x49, 0xa2, 0x22, 0x73, 0x23, 0x36, 0x75, 0xab, 0xb3, 0x2e, 0x3a, 0x92, 0x5a, 0xfa,
	0xd3, 0x7f, 0x79, 0xc0, 0xa9, 0xbf, 0x85, 0xf1, 0x1c, 0x8b, 0x2c, 0x97, 0x74, 0x85, 0x85, 0x40,
	0x4f, 0xdd, 0x00, 0x0c, 0xf6, 0x56, 0xe8, 0x5d, 0x73, 0xfe, 0x6f, 0xe0, 0x4e, 0xe2, 0x0d, 0x80,
	0x71, 0x76, 0x89, 0xa2, 0xd3, 0x96, 0xd9, 0x9d, 0xc0, 0xb3, 0x3d, 0xb8, 0xc9, 0x37, 0xdd, 0xb7,
	0xf8, 0x35, 0xd4, 0xe2, 0xd7, 0xb0, 0xe3, 0x7f, 0x0b, 0xa3, 0x72, 0x2d, 0x35, 0x7b, 0xda, 0xd8,
	0x53, 0xc7, 0x3d, 0xdd, 0x01, 0x9b, 0x95, 0xcd, 0x2e, 0xb4, 0x2a, 0xd7, 0x50, 0xab, 0x72, 0x0d,
	0x3b, 0xfe, 0x6b, 0x73, 0x6b, 0x45, 0x2c, 0x2f, 0x6f, 0x9c, 0x0f, 0xab, 0xbd, 0xb0, 0x17, 0x54,
	0x30, 0x69, 0x00, 0x15, 0xe7, 0xdd, 0x37, 0x70, 0x16, 0xf3, 0xed, 0xac, 0xd8, 0xde, 0x61, 0x49,
	0x67, 0xd5, 0xe7, 0xc8, 0xac, 0xfa, 0x1e, 0x79, 0x77, 0xba, 0x7b, 0xa5, 0x45, 0xa5, 0x46, 0xd4,
	0xff, 0xe3, 0x58, 0x8b, 0x7d, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0xa9, 0x60, 0xc2,
	0xc9, 0x08, 0x00, 0x00,
}
