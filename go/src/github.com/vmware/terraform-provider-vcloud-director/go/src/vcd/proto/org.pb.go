// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/org.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateOrgInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OrgFullName string `protobuf:"bytes,2,opt,name=org_full_name,json=orgFullName" json:"org_full_name,omitempty"`
	IsEnabled   bool   `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (m *CreateOrgInfo) Reset()                    { *m = CreateOrgInfo{} }
func (m *CreateOrgInfo) String() string            { return proto1.CompactTextString(m) }
func (*CreateOrgInfo) ProtoMessage()               {}
func (*CreateOrgInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *CreateOrgInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateOrgInfo) GetOrgFullName() string {
	if m != nil {
		return m.OrgFullName
	}
	return ""
}

func (m *CreateOrgInfo) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type CreateOrgResult struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *CreateOrgResult) Reset()                    { *m = CreateOrgResult{} }
func (m *CreateOrgResult) String() string            { return proto1.CompactTextString(m) }
func (*CreateOrgResult) ProtoMessage()               {}
func (*CreateOrgResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *CreateOrgResult) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type DeleteOrgInfo struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Force     bool   `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
	Recursive bool   `protobuf:"varint,3,opt,name=recursive" json:"recursive,omitempty"`
}

func (m *DeleteOrgInfo) Reset()                    { *m = DeleteOrgInfo{} }
func (m *DeleteOrgInfo) String() string            { return proto1.CompactTextString(m) }
func (*DeleteOrgInfo) ProtoMessage()               {}
func (*DeleteOrgInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *DeleteOrgInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteOrgInfo) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *DeleteOrgInfo) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

type DeleteOrgResult struct {
	Deleted bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *DeleteOrgResult) Reset()                    { *m = DeleteOrgResult{} }
func (m *DeleteOrgResult) String() string            { return proto1.CompactTextString(m) }
func (*DeleteOrgResult) ProtoMessage()               {}
func (*DeleteOrgResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *DeleteOrgResult) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type ReadOrgInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ReadOrgInfo) Reset()                    { *m = ReadOrgInfo{} }
func (m *ReadOrgInfo) String() string            { return proto1.CompactTextString(m) }
func (*ReadOrgInfo) ProtoMessage()               {}
func (*ReadOrgInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *ReadOrgInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ReadOrgResult struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OrgFullName string `protobuf:"bytes,2,opt,name=org_full_name,json=orgFullName" json:"org_full_name,omitempty"`
	IsEnabled   bool   `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	Present     bool   `protobuf:"varint,4,opt,name=present" json:"present,omitempty"`
}

func (m *ReadOrgResult) Reset()                    { *m = ReadOrgResult{} }
func (m *ReadOrgResult) String() string            { return proto1.CompactTextString(m) }
func (*ReadOrgResult) ProtoMessage()               {}
func (*ReadOrgResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *ReadOrgResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadOrgResult) GetOrgFullName() string {
	if m != nil {
		return m.OrgFullName
	}
	return ""
}

func (m *ReadOrgResult) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *ReadOrgResult) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

type UpdateOrgInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	OrgFullName string `protobuf:"bytes,2,opt,name=org_full_name,json=orgFullName" json:"org_full_name,omitempty"`
	IsEnabled   bool   `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (m *UpdateOrgInfo) Reset()                    { *m = UpdateOrgInfo{} }
func (m *UpdateOrgInfo) String() string            { return proto1.CompactTextString(m) }
func (*UpdateOrgInfo) ProtoMessage()               {}
func (*UpdateOrgInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *UpdateOrgInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOrgInfo) GetOrgFullName() string {
	if m != nil {
		return m.OrgFullName
	}
	return ""
}

func (m *UpdateOrgInfo) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type UpdateOrgResult struct {
	Updated bool `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateOrgResult) Reset()                    { *m = UpdateOrgResult{} }
func (m *UpdateOrgResult) String() string            { return proto1.CompactTextString(m) }
func (*UpdateOrgResult) ProtoMessage()               {}
func (*UpdateOrgResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *UpdateOrgResult) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func init() {
	proto1.RegisterType((*CreateOrgInfo)(nil), "proto.CreateOrgInfo")
	proto1.RegisterType((*CreateOrgResult)(nil), "proto.CreateOrgResult")
	proto1.RegisterType((*DeleteOrgInfo)(nil), "proto.DeleteOrgInfo")
	proto1.RegisterType((*DeleteOrgResult)(nil), "proto.DeleteOrgResult")
	proto1.RegisterType((*ReadOrgInfo)(nil), "proto.ReadOrgInfo")
	proto1.RegisterType((*ReadOrgResult)(nil), "proto.ReadOrgResult")
	proto1.RegisterType((*UpdateOrgInfo)(nil), "proto.UpdateOrgInfo")
	proto1.RegisterType((*UpdateOrgResult)(nil), "proto.UpdateOrgResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Org service

type OrgClient interface {
	// create a organisation
	Create(ctx context.Context, in *CreateOrgInfo, opts ...grpc.CallOption) (*CreateOrgResult, error)
	// delete a organisation
	Delete(ctx context.Context, in *DeleteOrgInfo, opts ...grpc.CallOption) (*DeleteOrgResult, error)
	// Read Org
	Read(ctx context.Context, in *ReadOrgInfo, opts ...grpc.CallOption) (*ReadOrgResult, error)
	// Update org
	Update(ctx context.Context, in *UpdateOrgInfo, opts ...grpc.CallOption) (*UpdateOrgResult, error)
}

type orgClient struct {
	cc *grpc.ClientConn
}

func NewOrgClient(cc *grpc.ClientConn) OrgClient {
	return &orgClient{cc}
}

func (c *orgClient) Create(ctx context.Context, in *CreateOrgInfo, opts ...grpc.CallOption) (*CreateOrgResult, error) {
	out := new(CreateOrgResult)
	err := grpc.Invoke(ctx, "/proto.Org/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) Delete(ctx context.Context, in *DeleteOrgInfo, opts ...grpc.CallOption) (*DeleteOrgResult, error) {
	out := new(DeleteOrgResult)
	err := grpc.Invoke(ctx, "/proto.Org/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) Read(ctx context.Context, in *ReadOrgInfo, opts ...grpc.CallOption) (*ReadOrgResult, error) {
	out := new(ReadOrgResult)
	err := grpc.Invoke(ctx, "/proto.Org/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgClient) Update(ctx context.Context, in *UpdateOrgInfo, opts ...grpc.CallOption) (*UpdateOrgResult, error) {
	out := new(UpdateOrgResult)
	err := grpc.Invoke(ctx, "/proto.Org/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Org service

type OrgServer interface {
	// create a organisation
	Create(context.Context, *CreateOrgInfo) (*CreateOrgResult, error)
	// delete a organisation
	Delete(context.Context, *DeleteOrgInfo) (*DeleteOrgResult, error)
	// Read Org
	Read(context.Context, *ReadOrgInfo) (*ReadOrgResult, error)
	// Update org
	Update(context.Context, *UpdateOrgInfo) (*UpdateOrgResult, error)
}

func RegisterOrgServer(s *grpc.Server, srv OrgServer) {
	s.RegisterService(&_Org_serviceDesc, srv)
}

func _Org_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Org/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).Create(ctx, req.(*CreateOrgInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrgInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Org/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).Delete(ctx, req.(*DeleteOrgInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOrgInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Org/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).Read(ctx, req.(*ReadOrgInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Org_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Org/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServer).Update(ctx, req.(*UpdateOrgInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Org_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Org",
	HandlerType: (*OrgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Org_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Org_Delete_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Org_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Org_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/org.proto",
}

func init() { proto1.RegisterFile("proto/org.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0x4b, 0x4b, 0xf3, 0x40,
	0x14, 0x6d, 0xbe, 0x3e, 0xbe, 0xf6, 0x96, 0x50, 0x18, 0x82, 0x84, 0xa2, 0x50, 0x67, 0x55, 0x10,
	0x2a, 0xd4, 0x8d, 0x7b, 0x1f, 0xe0, 0xc6, 0xc2, 0x80, 0xb8, 0x0c, 0x69, 0x72, 0x13, 0x02, 0x63,
	0x26, 0x4c, 0x12, 0xd7, 0xfe, 0x5b, 0xff, 0x86, 0xcc, 0xa3, 0xd3, 0x26, 0x8b, 0xee, 0x74, 0x95,
	0xb9, 0xe7, 0x3e, 0xce, 0xc9, 0x3d, 0x17, 0x16, 0x95, 0x14, 0x8d, 0xb8, 0x15, 0x32, 0xdf, 0xe8,
	0x17, 0x19, 0xeb, 0x0f, 0xcd, 0xc0, 0x7f, 0x90, 0x18, 0x37, 0xb8, 0x93, 0xf9, 0x4b, 0x99, 0x09,
	0x42, 0x60, 0x54, 0xc6, 0x1f, 0x18, 0x7a, 0x2b, 0x6f, 0x3d, 0x63, 0xfa, 0x4d, 0x28, 0xf8, 0x42,
	0xe6, 0x51, 0xd6, 0x72, 0x1e, 0xe9, 0xe4, 0x3f, 0x9d, 0x9c, 0x0b, 0x99, 0x3f, 0xb7, 0x9c, 0xbf,
	0xaa, 0x9a, 0x2b, 0x80, 0xa2, 0x8e, 0xb0, 0x8c, 0xf7, 0x1c, 0xd3, 0x70, 0xb8, 0xf2, 0xd6, 0x53,
	0x36, 0x2b, 0xea, 0x27, 0x03, 0xd0, 0x1b, 0x58, 0x38, 0x1e, 0x86, 0x75, 0xcb, 0x1b, 0x12, 0xc2,
	0xff, 0x44, 0x43, 0xa9, 0x26, 0x9b, 0xb2, 0x43, 0x48, 0xdf, 0xc1, 0x7f, 0x44, 0x8e, 0xe7, 0x45,
	0x05, 0x30, 0xce, 0x84, 0x4c, 0x8c, 0x98, 0x29, 0x33, 0x01, 0xb9, 0x84, 0x99, 0xc4, 0xa4, 0x95,
	0x75, 0xf1, 0x89, 0x07, 0x15, 0x0e, 0x50, 0x2a, 0xdc, 0xe0, 0xa3, 0x8a, 0x54, 0x43, 0x4e, 0x85,
	0x0d, 0xe9, 0x35, 0xcc, 0x19, 0xc6, 0xe9, 0x19, 0x0d, 0xf4, 0xcb, 0x03, 0xdf, 0xd6, 0xd8, 0x71,
	0xbf, 0xb3, 0x3e, 0xa5, 0xb2, 0x92, 0x58, 0x63, 0xd9, 0x84, 0x23, 0xa3, 0xd2, 0x86, 0xca, 0xc0,
	0xb7, 0x2a, 0xfd, 0x13, 0x03, 0x1d, 0xcf, 0x71, 0x75, 0xad, 0x86, 0xdc, 0xea, 0x6c, 0xb8, 0xfd,
	0xf6, 0x60, 0xb8, 0x93, 0x39, 0xb9, 0x87, 0x89, 0x71, 0x9d, 0x04, 0xe6, 0xec, 0x36, 0x9d, 0x63,
	0x5b, 0x5e, 0xf4, 0x51, 0x33, 0x99, 0x0e, 0x54, 0xa7, 0x71, 0xca, 0x75, 0x76, 0x2e, 0xc2, 0x75,
	0xf6, 0xec, 0xa4, 0x03, 0xb2, 0x85, 0x91, 0xb2, 0x84, 0x10, 0x5b, 0x71, 0xe2, 0xe1, 0x32, 0xe8,
	0x62, 0xa7, 0x6c, 0xe6, 0xe7, 0x1c, 0x5b, 0x67, 0xa7, 0x8e, 0xad, 0xb7, 0x01, 0x3a, 0xd8, 0x4f,
	0x74, 0xe2, 0xee, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x40, 0xaa, 0xde, 0x60, 0x03, 0x00, 0x00,
}
