/*****************************************************************
* terraform-provider-vcloud-director
* Copyright (c) 2017 VMware, Inc. All Rights Reserved.
* SPDX-License-Identifier: BSD-2-Clause
******************************************************************/

syntax = "proto3";

package proto;

message CreateVappVmInfo{
	string target_vm_name = 1;
	string target_vapp = 2;
	string target_vdc = 3;
	string source_vapp = 4;
	string source_vm_name = 5;
	string hostname = 6;
	string password = 7;
	bool password_auto = 8;
	bool password_reset = 9;
	string cust_script = 10;
	string network = 11;
	string storage_profile = 12;
	bool power_on = 13;
	bool all_eulas_accepted = 14;
    string source_catalog_name=15;
    string source_template_name=16;
    string ip_allocation_mode=17;
}


message CreateVappVmResult{
    bool created = 1;
}

message DeleteVappVmInfo{
    string target_vm_name = 1 ;
    string target_vdc = 2;
    string target_vapp = 3;
}

message DeleteVappVmResult{
    bool deleted = 1;
}

message ReadVappVmInfo{
    string target_vm_name = 1 ;
    string target_vdc = 2;
    string target_vapp = 3;
}

message ReadVappVmResult{
    string target_vm_name = 1;
	string target_vapp = 2;
	string target_vdc = 3;
	string source_vapp = 4;
	string source_vm_name = 5;
	string hostname = 6;
	bool password_auto = 7;
	bool password_reset = 8;
	string cust_script = 9;
	string network = 10;
	string storage_profile = 11;
	bool power_on = 12;
	bool all_eulas_accepted = 13;
    bool present = 14;
    int32 virtual_cpus = 15; 
    int32 cores_per_socket = 16;
    int32 memory = 17;
}

message UpdateVappVmInfo{
 	string name = 1;
 	bool is_enabled = 2;
}

message UpdateVappVmResult{
	bool updated = 1;
}

message PowerOnVappVmInfo{
 	string target_vm_name = 1 ;
    string target_vdc = 2;
    string target_vapp = 3;
}

message PowerOnVappVmResult{
	bool powered_on = 1;
}

message PowerOffVappVmInfo{
 	string target_vm_name = 1 ;
    string target_vdc = 2;
    string target_vapp = 3;
}

message PowerOffVappVmResult{
	bool powered_off = 1;
}

message ModifyVappVmMemoryInfo{
 	string target_vm_name = 1 ;
    string target_vdc = 2;
    string target_vapp = 3;   
    int32 memory = 4; 
}

message ModifyVappVmMemoryResult{
	bool modified = 1;
}


message ModifyVappVmCPUInfo{
 	string target_vm_name = 1 ;
    string target_vdc = 2;
    string target_vapp = 3;
    int32 virtual_cpus = 4; 
    int32 cores_per_socket = 5;
}

message ModifyVappVmCPUResult{
	bool modified = 1;
}

service VappVm {
	// create a VappVM through vapp
	rpc CreateFromVapp(  CreateVappVmInfo ) returns ( CreateVappVmResult ) {}

	// create a VappVM through catalog
	rpc CreateFromCatalog(  CreateVappVmInfo ) returns ( CreateVappVmResult ) {}

	//create a VappVm
	rpc Create(  CreateVappVmInfo ) returns ( CreateVappVmResult ) {}

	// delete a VappVm
	rpc Delete(  DeleteVappVmInfo ) returns ( DeleteVappVmResult ) {}

	// Read VappVm
	rpc Read(  ReadVappVmInfo ) returns ( ReadVappVmResult ) {}

	//Update VappVm
	rpc Update ( UpdateVappVmInfo ) returns ( UpdateVappVmResult ) {}

	// PowerOn VappVm
	rpc PowerOn ( PowerOnVappVmInfo ) returns ( PowerOnVappVmResult ) {}

	// PowerOff VappVm
	rpc PowerOff ( PowerOffVappVmInfo ) returns ( PowerOffVappVmResult ) {}

	// ModifyCPU VappVm
	rpc ModifyCPU ( ModifyVappVmCPUInfo ) returns ( ModifyVappVmCPUResult ) {}

	// ModifyMemory VappVm
	rpc ModifyMemory ( ModifyVappVmMemoryInfo ) returns ( ModifyVappVmMemoryResult ) {}

}
